AWSTemplateFormatVersion: '2010-09-09'
Description: 'Secrets Management Configuration with SSM Parameter Store and Secrets Manager'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  ApplicationName:
    Type: String
    Default: flightdata-pipeline
    Description: Application name for resource naming

  OpenSkyAPIUsername:
    Type: String
    NoEcho: true
    Description: OpenSky Network API Username
    
  OpenSkyAPIPassword:
    Type: String
    NoEcho: true
    Description: OpenSky Network API Password

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database master password
    MinLength: 8
    MaxLength: 128

Resources:
  # KMS Key for Secrets (imported from KMS stack)
  SecretsKMSKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/kms/secrets-key'
      Type: String
      Value: !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-kms:SecretsManagerKMSKeyId}}'
      Description: KMS key for secrets encryption

  # SSM Parameters for Configuration (non-sensitive)
  
  # Application Configuration
  AppConfigNamespace:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/config/namespace'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}'
      Description: Application namespace

  AppConfigRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/config/region'
      Type: String
      Value: !Ref AWS::Region
      Description: Primary AWS region

  # S3 Bucket Names
  RawDataBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/s3/raw-data-bucket'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-raw-data'
      Description: S3 bucket for raw flight data

  ProcessedDataBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/s3/processed-data-bucket'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-processed-data'
      Description: S3 bucket for processed flight data

  # DynamoDB Table Names
  FlightDataTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/dynamodb/flight-data-table'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-flight-data'
      Description: DynamoDB table for flight data

  QualityMetricsTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/dynamodb/quality-metrics-table'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-quality-metrics'
      Description: DynamoDB table for data quality metrics

  # Lambda Function Names
  DataIngestionFunction:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/lambda/data-ingestion-function'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-data-ingestion'
      Description: Lambda function for data ingestion

  DataProcessingFunction:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/lambda/data-processing-function'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-data-processing'
      Description: Lambda function for data processing

  DataQualityFunction:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/lambda/data-quality-function'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-data-quality'
      Description: Lambda function for data quality validation

  # API Configuration
  OpenSkyAPIEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/opensky/endpoint'
      Type: String
      Value: 'https://opensky-network.org/api'
      Description: OpenSky Network API endpoint

  APIRateLimit:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/rate-limit'
      Type: String
      Value: '400'
      Description: API rate limit per hour

  # Data Processing Configuration
  BatchSize:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/processing/batch-size'
      Type: String
      Value: '1000'
      Description: Batch size for data processing

  QualityThreshold:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/quality/threshold'
      Type: String
      Value: '0.95'
      Description: Data quality threshold

  # Monitoring Configuration
  CloudWatchNamespace:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/monitoring/cloudwatch-namespace'
      Type: String
      Value: !Sub '${ApplicationName}/${Environment}'
      Description: CloudWatch metrics namespace

  LogRetentionDays:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/monitoring/log-retention-days'
      Type: String
      Value: '30'
      Description: CloudWatch logs retention in days

  # Secrets Manager Secrets (sensitive data)
  
  # OpenSky Network API Credentials
  OpenSkyAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}/${Environment}/api/opensky/credentials'
      Description: 'OpenSky Network API credentials'
      SecretString: !Sub |
        {
          "username": "${OpenSkyAPIUsername}",
          "password": "${OpenSkyAPIPassword}",
          "endpoint": "https://opensky-network.org/api"
        }
      KmsKeyId: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      ReplicaRegions:
        - Region: us-west-2
          KmsKeyId: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Purpose
          Value: API-Credentials

  # Database Credentials
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}/${Environment}/database/master-credentials'
      Description: 'Database master user credentials'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "flight_admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      KmsKeyId: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Purpose
          Value: Database-Credentials

  # JWT Secret for API Authentication
  JWTSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}/${Environment}/auth/jwt-secret'
      Description: 'JWT signing secret for API authentication'
      GenerateSecretString:
        PasswordLength: 64
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      KmsKeyId: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Purpose
          Value: Authentication

  # Encryption Keys for Application Layer
  ApplicationEncryptionKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}/${Environment}/encryption/application-key'
      Description: 'Application layer encryption key'
      GenerateSecretString:
        PasswordLength: 64
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: false
        ExcludePunctuation: true
      KmsKeyId: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Purpose
          Value: Application-Encryption

  # External Service Integration Keys
  ThirdPartyAPIKeys:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}/${Environment}/api/third-party/keys'
      Description: 'Third party service API keys'
      SecretString: !Sub |
        {
          "weather_api_key": "REPLACE_WITH_ACTUAL_KEY",
          "notification_service_key": "REPLACE_WITH_ACTUAL_KEY",
          "monitoring_webhook": "REPLACE_WITH_ACTUAL_WEBHOOK"
        }
      KmsKeyId: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Purpose
          Value: External-API-Keys

  # Secrets Rotation Configuration

  # Database Secret Rotation
  DatabaseSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref DatabaseSecret
      HostedRotationLambda:
        RotationType: PostgreSQLSingleUser
        RotationLambdaName: !Sub '${ApplicationName}-${Environment}-db-rotation'
        VpcSecurityGroupIds: 
          - !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-vpc:LambdaSecurityGroupId}}'
        VpcSubnetIds:
          - !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-vpc:PrivateSubnet1Id}}'
          - !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-vpc:PrivateSubnet2Id}}'
      RotationRules:
        AutomaticallyAfterDays: 30

  # API Key Rotation Lambda Function
  APIKeyRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-${Environment}-api-key-rotation'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt APIKeyRotationRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
          KMS_KEY_ID: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'
      VpcConfig:
        SecurityGroupIds:
          - !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-vpc:LambdaSecurityGroupId}}'
        SubnetIds:
          - !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-vpc:PrivateSubnet1Id}}'
          - !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-vpc:PrivateSubnet2Id}}'
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """Rotate API keys in Secrets Manager."""
              
              secrets_client = boto3.client('secretsmanager')
              secret_arn = event['SecretId']
              token = event['ClientRequestToken']
              step = event['Step']
              
              try:
                  if step == "createSecret":
                      create_secret(secrets_client, secret_arn, token)
                  elif step == "setSecret":
                      set_secret(secrets_client, secret_arn, token)
                  elif step == "testSecret":
                      test_secret(secrets_client, secret_arn, token)
                  elif step == "finishSecret":
                      finish_secret(secrets_client, secret_arn, token)
                  else:
                      logger.error(f"Invalid step parameter: {step}")
                      return {"statusCode": 400, "body": "Invalid step"}
                      
                  return {"statusCode": 200, "body": f"Step {step} completed successfully"}
                  
              except Exception as e:
                  logger.error(f"Error in step {step}: {str(e)}")
                  raise e

          def create_secret(secrets_client, secret_arn, token):
              """Create new secret version."""
              # Generate new API key
              import secrets as py_secrets
              new_api_key = py_secrets.token_urlsafe(32)
              
              # Update secret with new key
              secret_dict = {"api_key": new_api_key, "created_date": str(context.aws_request_id)}
              
              secrets_client.put_secret_value(
                  SecretId=secret_arn,
                  VersionId=token,
                  SecretString=json.dumps(secret_dict),
                  VersionStage="AWSPENDING"
              )
              
          def set_secret(secrets_client, secret_arn, token):
              """Configure the secret in the service."""
              # In a real implementation, you would update the external service
              # with the new API key here
              logger.info("Setting secret in external service")
              
          def test_secret(secrets_client, secret_arn, token):
              """Test the new secret."""
              # In a real implementation, you would test the new API key
              # against the external service here
              logger.info("Testing new secret")
              
          def finish_secret(secrets_client, secret_arn, token):
              """Finalize the rotation."""
              # Move AWSPENDING to AWSCURRENT
              secrets_client.update_secret_version_stage(
                  SecretId=secret_arn,
                  VersionStage="AWSCURRENT",
                  MoveToVersionId=token,
                  RemoveFromVersionId=secrets_client.describe_secret(SecretId=secret_arn)['VersionIdsToStages']['AWSCURRENT'][0]
              )

  # API Key Rotation Role
  APIKeyRotationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-${Environment}-api-key-rotation-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref ThirdPartyAPIKeys
                  - !Ref JWTSecret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Sub '{{resolve:ssm:/${ApplicationName}/${Environment}/kms/secrets-key}}'

  # Manual API Key Rotation Schedule
  APIKeyRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref ThirdPartyAPIKeys
      RotationLambdaArn: !GetAtt APIKeyRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 90

  # Resource-based policy for Secrets Manager
  SecretsAccessPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref OpenSkyAPISecret
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaAccess
            Effect: Allow
            Principal:
              AWS: !Sub '{{resolve:cloudformation:${ApplicationName}-${Environment}-iam:LambdaExecutionRoleArn}}'
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              StringEquals:
                'secretsmanager:VersionStage': 'AWSCURRENT'

  # CloudWatch Alarms for Secrets Access
  SecretAccessAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ApplicationName}-${Environment}-secret-access-anomaly'
      AlarmDescription: 'Unusual secret access patterns detected'
      MetricName: SecretRetrievals
      Namespace: AWS/SecretsManager
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: SecretName
          Value: !Ref OpenSkyAPISecret
      AlarmActions:
        - !Ref SecurityAlertsTopicArn

  SecurityAlertsTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/alerts/security-topic-arn'
      Type: String
      Value: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ApplicationName}-${Environment}-security-alerts'
      Description: SNS topic ARN for security alerts

  # Cross-region replication for critical secrets
  SecretReplicationStatus:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/secrets/replication-status'
      Type: String
      Value: 'enabled'
      Description: Status of cross-region secret replication

Outputs:
  OpenSkyAPISecretArn:
    Description: OpenSky API Secret ARN
    Value: !Ref OpenSkyAPISecret
    Export:
      Name: !Sub '${AWS::StackName}-OpenSkyAPISecret'

  DatabaseSecretArn:
    Description: Database Secret ARN
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecret'

  JWTSecretArn:
    Description: JWT Secret ARN
    Value: !Ref JWTSecret
    Export:
      Name: !Sub '${AWS::StackName}-JWTSecret'

  ApplicationEncryptionKeyArn:
    Description: Application Encryption Key ARN
    Value: !Ref ApplicationEncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationEncryptionKey'

  ParameterStorePrefix:
    Description: SSM Parameter Store prefix for configuration
    Value: !Sub '/${ApplicationName}/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ParameterStorePrefix'
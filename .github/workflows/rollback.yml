name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production
      rollback_type:
        description: 'Type of rollback to perform'
        required: true
        default: 'lambda_only'
        type: choice
        options:
          - lambda_only
          - infrastructure_only
          - full_rollback
          - database_rollback
      target_version:
        description: 'Target version/commit to rollback to (leave empty for previous version)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      skip_validations:
        description: 'Skip pre-rollback validations (emergency rollback)'
        required: false
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: '1.5.7'
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-1'

jobs:
  # Validate rollback request and determine scope
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.validate.outputs.environment }}
      rollback_type: ${{ steps.validate.outputs.rollback_type }}
      target_version: ${{ steps.validate.outputs.target_version }}
      lambda_functions: ${{ steps.validate.outputs.lambda_functions }}
      requires_approval: ${{ steps.validate.outputs.requires_approval }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version lookup

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate rollback request
      id: validate
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        ROLLBACK_TYPE="${{ github.event.inputs.rollback_type }}"
        TARGET_VERSION="${{ github.event.inputs.target_version }}"
        REASON="${{ github.event.inputs.reason }}"
        
        echo "=== Rollback Validation ==="
        echo "Environment: $ENVIRONMENT"
        echo "Rollback Type: $ROLLBACK_TYPE"
        echo "Target Version: ${TARGET_VERSION:-'auto-detect'}"
        echo "Reason: $REASON"
        echo ""
        
        # Validate environment
        if [[ ! "$ENVIRONMENT" =~ ^(dev|staging|production)$ ]]; then
          echo "❌ Invalid environment: $ENVIRONMENT"
          exit 1
        fi
        
        # Production rollbacks require approval
        if [ "$ENVIRONMENT" = "production" ]; then
          echo "requires_approval=true" >> $GITHUB_OUTPUT
        else
          echo "requires_approval=false" >> $GITHUB_OUTPUT
        fi
        
        # Find target version if not specified
        if [ -z "$TARGET_VERSION" ]; then
          echo "🔍 Detecting previous deployment..."
          
          # Get last successful deployment from S3 metadata
          LAST_DEPLOYMENT=$(aws s3 ls \
            "s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/flightdata-pipeline/$ENVIRONMENT/deployments/" \
            --recursive | sort | tail -2 | head -1 | awk '{print $4}')
          
          if [ -n "$LAST_DEPLOYMENT" ]; then
            # Extract commit SHA from filename
            TARGET_VERSION=$(basename "$LAST_DEPLOYMENT" .json | cut -d'-' -f2)
            echo "🎯 Auto-detected target version: $TARGET_VERSION"
          else
            echo "❌ Cannot auto-detect previous deployment"
            exit 1
          fi
        else
          # Validate provided version exists
          if ! git rev-parse --verify "$TARGET_VERSION" > /dev/null 2>&1; then
            echo "❌ Invalid target version: $TARGET_VERSION"
            exit 1
          fi
        fi
        
        # Get list of Lambda functions to rollback
        LAMBDA_FUNCTIONS=()
        case "$ROLLBACK_TYPE" in
          "lambda_only"|"full_rollback")
            FUNCTIONS=("processor" "api-handler" "aggregator" "scheduler")
            for func in "${FUNCTIONS[@]}"; do
              FUNCTION_NAME="flightdata-$func-$ENVIRONMENT"
              # Check if function exists
              if aws lambda get-function --function-name "$FUNCTION_NAME" > /dev/null 2>&1; then
                LAMBDA_FUNCTIONS+=("$FUNCTION_NAME")
              fi
            done
            ;;
        esac
        
        # Output results
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "rollback_type=$ROLLBACK_TYPE" >> $GITHUB_OUTPUT
        echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
        
        # Convert array to JSON for output
        LAMBDA_FUNCTIONS_JSON=$(printf '%s\n' "${LAMBDA_FUNCTIONS[@]}" | jq -R . | jq -s .)
        echo "lambda_functions=$LAMBDA_FUNCTIONS_JSON" >> $GITHUB_OUTPUT
        
        echo "✅ Rollback validation completed"
        echo "Target Version: $TARGET_VERSION"
        echo "Lambda Functions: ${#LAMBDA_FUNCTIONS[@]} functions"

    - name: Pre-rollback system check
      if: github.event.inputs.skip_validations != 'true'
      run: |
        echo "🔍 Running pre-rollback system check..."
        
        ENVIRONMENT="${{ steps.validate.outputs.environment }}"
        
        # Check current system health
        echo "Checking system health..."
        
        # Test basic connectivity to key services
        HEALTH_ISSUES=()
        
        # Check Lambda functions
        FUNCTIONS=("processor" "api-handler" "aggregator" "scheduler")
        for func in "${FUNCTIONS[@]}"; do
          FUNCTION_NAME="flightdata-$func-$ENVIRONMENT"
          
          if aws lambda get-function --function-name "$FUNCTION_NAME" > /dev/null 2>&1; then
            # Test function invocation
            if aws lambda invoke \
              --function-name "$FUNCTION_NAME" \
              --payload '{"test":true,"source":"rollback-validation"}' \
              /tmp/test_response.json > /dev/null 2>&1; then
              echo "✅ $FUNCTION_NAME is responding"
            else
              echo "⚠️  $FUNCTION_NAME is not responding properly"
              HEALTH_ISSUES+=("$FUNCTION_NAME not responding")
            fi
          fi
        done
        
        # Check DynamoDB
        TABLE_NAME="flightdata-main-$ENVIRONMENT"
        if aws dynamodb describe-table --table-name "$TABLE_NAME" > /dev/null 2>&1; then
          echo "✅ DynamoDB table $TABLE_NAME accessible"
        else
          echo "⚠️  DynamoDB table $TABLE_NAME not accessible"
          HEALTH_ISSUES+=("DynamoDB table not accessible")
        fi
        
        # Report health status
        if [ ${#HEALTH_ISSUES[@]} -eq 0 ]; then
          echo "✅ System health check passed"
        else
          echo "⚠️  Health issues detected:"
          for issue in "${HEALTH_ISSUES[@]}"; do
            echo "  - $issue"
          done
          echo ""
          echo "Consider whether rollback is still appropriate given these issues."
        fi

  # Production rollback approval
  production-rollback-approval:
    name: Production Rollback Approval
    runs-on: ubuntu-latest
    needs: [validate-rollback]
    if: needs.validate-rollback.outputs.requires_approval == 'true'
    environment: production-rollback-approval
    
    steps:
    - name: Request production rollback approval
      run: |
        echo "🚨 Production Rollback Requested"
        echo ""
        echo "Environment: ${{ needs.validate-rollback.outputs.environment }}"
        echo "Rollback Type: ${{ needs.validate-rollback.outputs.rollback_type }}"
        echo "Target Version: ${{ needs.validate-rollback.outputs.target_version }}"
        echo "Reason: ${{ github.event.inputs.reason }}"
        echo "Requested by: ${{ github.actor }}"
        echo ""
        echo "⚠️  This will rollback the production environment!"
        echo "Please verify the rollback is necessary and approve to proceed."

  # Create rollback snapshot
  create-rollback-snapshot:
    name: Create Rollback Snapshot
    runs-on: ubuntu-latest
    needs: [validate-rollback, production-rollback-approval]
    if: always() && needs.validate-rollback.result == 'success' && (needs.production-rollback-approval.result == 'success' || needs.production-rollback-approval.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create pre-rollback snapshot
      run: |
        echo "📸 Creating pre-rollback snapshot..."
        
        ENVIRONMENT="${{ needs.validate-rollback.outputs.environment }}"
        TIMESTAMP=$(date -u +%Y%m%d-%H%M%S)
        SNAPSHOT_ID="rollback-snapshot-$TIMESTAMP"
        
        # Create snapshot metadata
        cat > rollback-snapshot.json << EOF
        {
          "snapshot_id": "$SNAPSHOT_ID",
          "environment": "$ENVIRONMENT",
          "created_at": "$(date -u --iso-8601)",
          "created_by": "${{ github.actor }}",
          "workflow_run": "${{ github.run_id }}",
          "rollback_reason": "${{ github.event.inputs.reason }}",
          "rollback_type": "${{ needs.validate-rollback.outputs.rollback_type }}",
          "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
          "current_commit": "${{ github.sha }}",
          "lambda_functions": ${{ needs.validate-rollback.outputs.lambda_functions }},
          "system_state": {}
        }
        EOF
        
        # Capture current Lambda function versions
        echo "Capturing Lambda function states..."
        LAMBDA_FUNCTIONS=$(echo '${{ needs.validate-rollback.outputs.lambda_functions }}' | jq -r '.[]')
        
        for function in $LAMBDA_FUNCTIONS; do
          echo "  Capturing state for $function..."
          
          # Get current function configuration
          FUNCTION_CONFIG=$(aws lambda get-function-configuration --function-name "$function")
          FUNCTION_VERSION=$(echo "$FUNCTION_CONFIG" | jq -r '.Version')
          FUNCTION_SHA=$(echo "$FUNCTION_CONFIG" | jq -r '.CodeSha256')
          
          # Store function state
          jq --arg func "$function" --arg version "$FUNCTION_VERSION" --arg sha "$FUNCTION_SHA" \
            '.system_state.lambda_functions[$func] = {"version": $version, "sha": $sha}' \
            rollback-snapshot.json > tmp.json && mv tmp.json rollback-snapshot.json
        done
        
        # Capture Terraform state info
        echo "Capturing infrastructure state..."
        if [ "${{ needs.validate-rollback.outputs.rollback_type }}" = "infrastructure_only" ] || \
           [ "${{ needs.validate-rollback.outputs.rollback_type }}" = "full_rollback" ]; then
          
          # Get current Terraform state
          aws s3 cp \
            "s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/flightdata-pipeline/$ENVIRONMENT/terraform.tfstate" \
            current-terraform.tfstate 2>/dev/null || echo "No Terraform state found"
          
          if [ -f "current-terraform.tfstate" ]; then
            TFSTATE_CHECKSUM=$(sha256sum current-terraform.tfstate | cut -d' ' -f1)
            jq --arg checksum "$TFSTATE_CHECKSUM" \
              '.system_state.terraform_checksum = $checksum' \
              rollback-snapshot.json > tmp.json && mv tmp.json rollback-snapshot.json
          fi
        fi
        
        # Store snapshot in S3
        aws s3 cp rollback-snapshot.json \
          "s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/flightdata-pipeline/$ENVIRONMENT/rollback-snapshots/$SNAPSHOT_ID.json"
        
        echo "✅ Rollback snapshot created: $SNAPSHOT_ID"
        echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_ENV

  # Rollback Lambda functions
  rollback-lambda:
    name: Rollback Lambda Functions
    runs-on: ubuntu-latest
    needs: [validate-rollback, create-rollback-snapshot]
    if: always() && needs.create-rollback-snapshot.result == 'success' && (needs.validate-rollback.outputs.rollback_type == 'lambda_only' || needs.validate-rollback.outputs.rollback_type == 'full_rollback')
    
    strategy:
      matrix:
        function_name: ${{ fromJson(needs.validate-rollback.outputs.lambda_functions) }}
      fail-fast: false
    
    steps:
    - name: Checkout target version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target_version }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get current function backup version
      id: get_backup
      run: |
        FUNCTION_NAME="${{ matrix.function_name }}"
        
        echo "🔍 Looking for backup version of $FUNCTION_NAME..."
        
        # List function versions and find the most recent backup
        VERSIONS=$(aws lambda list-versions-by-function \
          --function-name "$FUNCTION_NAME" \
          --query 'Versions[?Description != null && contains(Description, `Backup`)]' \
          --output json)
        
        if [ "$VERSIONS" != "[]" ]; then
          # Get the most recent backup version
          BACKUP_VERSION=$(echo "$VERSIONS" | jq -r 'sort_by(.LastModified) | last | .Version')
          echo "backup_version=$BACKUP_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Found backup version: $BACKUP_VERSION"
        else
          echo "backup_version=" >> $GITHUB_OUTPUT
          echo "⚠️  No backup version found, will rebuild from source"
        fi

    - name: Rollback using backup version
      if: steps.get_backup.outputs.backup_version != ''
      run: |
        FUNCTION_NAME="${{ matrix.function_name }}"
        BACKUP_VERSION="${{ steps.get_backup.outputs.backup_version }}"
        
        echo "🔄 Rolling back $FUNCTION_NAME to backup version $BACKUP_VERSION..."
        
        # Update alias to point to backup version
        aws lambda update-alias \
          --function-name "$FUNCTION_NAME" \
          --name production \
          --function-version "$BACKUP_VERSION"
        
        echo "✅ Rollback completed using backup version"

    - name: Rollback by rebuilding from source
      if: steps.get_backup.outputs.backup_version == ''
      run: |
        FUNCTION_NAME="${{ matrix.function_name }}"
        
        echo "🔨 Rebuilding $FUNCTION_NAME from target version source..."
        
        # Extract function type from name (e.g., "flightdata-processor-dev" -> "processor")
        FUNC_TYPE=$(echo "$FUNCTION_NAME" | sed 's/flightdata-\(.*\)-[^-]*$/\1/')
        FUNCTION_DIR="lambda/flightdata-$FUNC_TYPE"
        
        if [ ! -d "$FUNCTION_DIR" ]; then
          echo "❌ Function directory not found: $FUNCTION_DIR"
          exit 1
        fi
        
        # Build deployment package
        BUILD_DIR="build/$FUNC_TYPE"
        mkdir -p "$BUILD_DIR"
        
        # Copy function code
        cp -r "$FUNCTION_DIR"/* "$BUILD_DIR/"
        
        # Install dependencies
        if [ -f "$BUILD_DIR/requirements.txt" ]; then
          pip install -r "$BUILD_DIR/requirements.txt" -t "$BUILD_DIR/" --no-deps
        fi
        
        # Clean up
        find "$BUILD_DIR" -name "*.pyc" -delete
        find "$BUILD_DIR" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Create ZIP package
        cd "$BUILD_DIR"
        zip -r "../$FUNC_TYPE-rollback.zip" . -q
        cd - > /dev/null
        
        # Deploy rollback version
        echo "Deploying rollback version..."
        aws lambda update-function-code \
          --function-name "$FUNCTION_NAME" \
          --zip-file "fileb://build/$FUNC_TYPE-rollback.zip" \
          --publish > /dev/null
        
        echo "✅ Rollback completed by rebuilding from source"

    - name: Test rolled back function
      run: |
        FUNCTION_NAME="${{ matrix.function_name }}"
        
        echo "🧪 Testing rolled back function: $FUNCTION_NAME"
        
        # Wait for function to be ready
        sleep 10
        
        # Test function invocation
        RESULT=$(aws lambda invoke \
          --function-name "$FUNCTION_NAME" \
          --payload '{"test":true,"source":"rollback-validation"}' \
          /tmp/rollback_test.json \
          --query 'StatusCode' --output text)
        
        if [ "$RESULT" = "200" ]; then
          echo "✅ Function test successful after rollback"
        else
          echo "❌ Function test failed after rollback (Status: $RESULT)"
          echo "Response:"
          cat /tmp/rollback_test.json
          exit 1
        fi

  # Rollback infrastructure
  rollback-infrastructure:
    name: Rollback Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-rollback, create-rollback-snapshot]
    if: always() && needs.create-rollback-snapshot.result == 'success' && (needs.validate-rollback.outputs.rollback_type == 'infrastructure_only' || needs.validate-rollback.outputs.rollback_type == 'full_rollback')
    
    steps:
    - name: Checkout target version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target_version }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd infrastructure/
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=flightdata-pipeline/${{ needs.validate-rollback.outputs.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan (Rollback)
      id: plan
      run: |
        cd infrastructure/
        
        echo "🔄 Planning infrastructure rollback to target version..."
        
        terraform plan \
          -var-file="environments/${{ needs.validate-rollback.outputs.environment }}.tfvars" \
          -var="git_commit_sha=${{ needs.validate-rollback.outputs.target_version }}" \
          -var="deployment_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -out=rollback-plan \
          -detailed-exitcode || true
        
        PLAN_EXIT_CODE=$?
        echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          echo "❌ Terraform rollback plan failed"
          exit 1
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "📋 Infrastructure changes required for rollback"
        else
          echo "✅ No infrastructure changes needed for rollback"
        fi

    - name: Terraform Apply (Rollback)
      if: steps.plan.outputs.plan_exit_code == '2'
      run: |
        cd infrastructure/
        
        echo "🔄 Applying infrastructure rollback..."
        terraform apply -auto-approve rollback-plan
        
        echo "✅ Infrastructure rollback completed"

  # Database rollback (if applicable)
  rollback-database:
    name: Rollback Database
    runs-on: ubuntu-latest
    needs: [validate-rollback, create-rollback-snapshot]
    if: always() && needs.create-rollback-snapshot.result == 'success' && needs.validate-rollback.outputs.rollback_type == 'database_rollback'
    
    steps:
    - name: Checkout target version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target_version }}

    - name: Configure AWS Credentials
      uses: actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Database rollback
      run: |
        echo "🔄 Performing database rollback..."
        
        ENVIRONMENT="${{ needs.validate-rollback.outputs.environment }}"
        
        # This is a placeholder for database rollback logic
        # In practice, this would depend on your database system and backup strategy
        
        echo "⚠️  Database rollback not implemented in this example"
        echo "For DynamoDB, consider:"
        echo "  - Point-in-time recovery"
        echo "  - Restore from backup"
        echo "  - Migration scripts"
        
        # Example: Restore DynamoDB table from backup
        # TABLE_NAME="flightdata-main-$ENVIRONMENT"
        # BACKUP_ARN="arn:aws:dynamodb:region:account:backup/table/backup-name"
        # 
        # aws dynamodb restore-table-from-backup \
        #   --target-table-name "$TABLE_NAME-rollback-temp" \
        #   --backup-arn "$BACKUP_ARN"

  # Post-rollback validation
  post-rollback-validation:
    name: Post-rollback Validation
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-lambda, rollback-infrastructure, rollback-database]
    if: always() && (needs.rollback-lambda.result == 'success' || needs.rollback-infrastructure.result == 'success' || needs.rollback-database.result == 'success' || (needs.rollback-lambda.result == 'skipped' && needs.rollback-infrastructure.result == 'skipped' && needs.rollback-database.result == 'skipped'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Wait for rollback to stabilize
      run: |
        echo "⏳ Waiting for rollback to stabilize..."
        sleep 30

    - name: Validate Lambda functions
      if: needs.rollback-lambda.result == 'success' || needs.validate-rollback.outputs.rollback_type == 'full_rollback'
      run: |
        echo "🧪 Validating Lambda functions after rollback..."
        
        ENVIRONMENT="${{ needs.validate-rollback.outputs.environment }}"
        LAMBDA_FUNCTIONS=$(echo '${{ needs.validate-rollback.outputs.lambda_functions }}' | jq -r '.[]')
        FAILED_FUNCTIONS=()
        
        for function in $LAMBDA_FUNCTIONS; do
          echo "Testing $function..."
          
          RESULT=$(aws lambda invoke \
            --function-name "$function" \
            --payload '{"test":true,"source":"post-rollback-validation"}' \
            /tmp/validation_response.json \
            --query 'StatusCode' --output text 2>/dev/null || echo "failed")
          
          if [ "$RESULT" = "200" ]; then
            echo "✅ $function validation passed"
          else
            echo "❌ $function validation failed"
            FAILED_FUNCTIONS+=("$function")
          fi
        done
        
        if [ ${#FAILED_FUNCTIONS[@]} -gt 0 ]; then
          echo "❌ Rollback validation failed for functions: ${FAILED_FUNCTIONS[*]}"
          exit 1
        fi
        
        echo "✅ All Lambda function validations passed"

    - name: Validate infrastructure
      if: needs.rollback-infrastructure.result == 'success' || needs.validate-rollback.outputs.rollback_type == 'full_rollback'
      run: |
        echo "🧪 Validating infrastructure after rollback..."
        
        ENVIRONMENT="${{ needs.validate-rollback.outputs.environment }}"
        
        # Test basic infrastructure components
        echo "Testing S3 bucket access..."
        BUCKET_NAME="flightdata-raw-$ENVIRONMENT"
        if aws s3 ls "s3://$BUCKET_NAME/" > /dev/null 2>&1; then
          echo "✅ S3 bucket accessible"
        else
          echo "❌ S3 bucket not accessible"
          exit 1
        fi
        
        echo "Testing DynamoDB table access..."
        TABLE_NAME="flightdata-main-$ENVIRONMENT"
        if aws dynamodb describe-table --table-name "$TABLE_NAME" > /dev/null 2>&1; then
          echo "✅ DynamoDB table accessible"
        else
          echo "❌ DynamoDB table not accessible"
          exit 1
        fi
        
        echo "✅ Infrastructure validation passed"

    - name: Generate rollback report
      run: |
        echo "📊 Generating rollback report..."
        
        cat > rollback-report.json << EOF
        {
          "rollback_id": "${{ github.run_id }}",
          "environment": "${{ needs.validate-rollback.outputs.environment }}",
          "rollback_type": "${{ needs.validate-rollback.outputs.rollback_type }}",
          "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
          "reason": "${{ github.event.inputs.reason }}",
          "initiated_by": "${{ github.actor }}",
          "initiated_at": "${{ github.event.created_at }}",
          "completed_at": "$(date -u --iso-8601)",
          "results": {
            "lambda_rollback": "${{ needs.rollback-lambda.result }}",
            "infrastructure_rollback": "${{ needs.rollback-infrastructure.result }}",
            "database_rollback": "${{ needs.rollback-database.result }}",
            "validation_status": "success"
          }
        }
        EOF
        
        # Store rollback report
        aws s3 cp rollback-report.json \
          "s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/flightdata-pipeline/${{ needs.validate-rollback.outputs.environment }}/rollback-reports/rollback-${{ github.run_id }}.json"
        
        echo "✅ Rollback report generated and stored"

  # Rollback notification
  rollback-notification:
    name: Rollback Notification
    runs-on: ubuntu-latest
    needs: [validate-rollback, post-rollback-validation]
    if: always()
    
    steps:
    - name: Rollback success notification
      if: needs.post-rollback-validation.result == 'success'
      run: |
        echo "🎉 Rollback completed successfully!"
        echo "Environment: ${{ needs.validate-rollback.outputs.environment }}"
        echo "Rollback Type: ${{ needs.validate-rollback.outputs.rollback_type }}"
        echo "Target Version: ${{ needs.validate-rollback.outputs.target_version }}"
        echo "Reason: ${{ github.event.inputs.reason }}"

    - name: Send success notification to Slack
      if: needs.post-rollback-validation.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#flightdata-deployments'
        message: |
          🔄 Rollback Completed Successfully!
          Environment: ${{ needs.validate-rollback.outputs.environment }}
          Rollback Type: ${{ needs.validate-rollback.outputs.rollback_type }}
          Target Version: ${{ needs.validate-rollback.outputs.target_version }}
          Reason: ${{ github.event.inputs.reason }}
          Initiated by: ${{ github.actor }}
          
          All validations passed ✅
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Rollback failure notification
      if: failure()
      run: |
        echo "❌ Rollback failed!"
        echo "Environment: ${{ needs.validate-rollback.outputs.environment }}"
        echo "Check the workflow logs for details"

    - name: Send failure notification to Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#flightdata-alerts'
        message: |
          🚨 Rollback Failed!
          Environment: ${{ needs.validate-rollback.outputs.environment }}
          Rollback Type: ${{ needs.validate-rollback.outputs.rollback_type }}
          Target Version: ${{ needs.validate-rollback.outputs.target_version }}
          Reason: ${{ github.event.inputs.reason }}
          
          Manual intervention required!
          Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}